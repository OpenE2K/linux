#!/bin/bash
scname=`basename $0`
scdir=`dirname $0`
conf_script=./scripts/config
conf_path=./arch/e2k/configs
[ "`uname -m`" != "e2k" ] && export ARCH=e2k
Confs()
{
cat <<EOF
 e2k_nort e2k_rt e2k_nn e2k_nnrt e2k_host e2k_guest
 e2c3_proto e12c_proto e16c_proto e2c3_nort e12c_nort
 e1cp_nort e1cp_rt
 e2s_nort e2s_rt e2s_nn e2s_nnrt e2s_host e2s_guest
 e3s_nort e3s_rt e3s_nn e3s_nnrt e3s_host e3s_guest
 e8c_nort e8c_rt e8c_nn e8c_nnrt e8c_host e8c_guest
 e8c2_nort e8c2_rt e8c2_nn e8c2_nnrt e8c2_host e8c2_guest
 e16c_nort e16c_rt e16c_nn e16c_nnrt
EOF
}
CONFS=`Confs | sed -e 's/$/ /g'`
###############################################################################
KnownConfs()
{
echo "Known <conf>s:"
Confs
}
usage()
{
	echo "incorrect param: $1"
	echo "usage: $scname [--def] --conf <conf> [--file <anyname>_defconfig]" >&2
	exit 1
}
Usage() {
	cat >&2 <<EOL
Usage:
        $scname [--def] --conf <conf> [--output_directory/-o <path>] [--file <anyname>_defconfig]

Generate .config or|and <defconfig> files for some kernel configuration
from arch/e2k/configs/defconfig | arch/e2k/configs/rt_defconfig

<defconfig>: ./arch/e2k/configs/<anyname>_defconfig
             (default: ./arch/e2k/configs/gen_<conf>_defconfig)

1. To generate <defconfig> file
   $scname --def --conf <conf> [--file <anyname>_defconfig]
2. To generate .config and <defconfig>
   $scname --conf <conf> --file <anyname>_defconfig
3. To generate .config only
   $scname --conf <conf>
4. To generate .config only in separate directory
   $scname --conf <conf> -o <output directory>

EOL
KnownConfs
exit 0
}
tmpf=tmp_$$_defconfig
cleanup()
{
	rm -f $conf_path/$tmpf
}
###############################################################################
conf_localversion()
{
	l=`echo $DCONF | sed -e 's/_/-/' -e 's/nort//' -e 's/-$//'`
	$conf_script $OPTFILE --set-str CONFIG_LOCALVERSION "-${l}" \
	|| exit 1
}
conf_no_builtin_gpu()
{
	$conf_script $OPTFILE \
	-d CONFIG_MCST_GPU_VIV -d CONFIG_DRM_VIVANTE \
	-d CONFIG_DRM_MGA2 -d CONFIG_MGA2_PWM -d CONFIG_MGA2_GPIO \
	-d CONFIG_DRM_IMX_HDMI \
	-d CONFIG_MCST_GPU_IMGTEC -d CONFIG_IMGTEC \
	-d CONFIG_MEM2ALLOC -d CONFIG_HANTRODEC -d CONFIG_BIGE \
	|| exit 1
}
conf_e1cp()
{
	# e1cp has:
	# 1) Vivante 3D GPU GC2500 (25 GFLOPS FP32) -
	#    galcore.ko (CONFIG_MCST_GPU_VIV), vivante.ko (CONFIG_DRM_VIVANTE)
	# 2) MGA2 - mga2.ko (CONFIG_DRM_MGA2), mga2-pwm.ko (CONFIG_MGA2_PWM),
	#    mga2-gpio.ko (CONFIG_MGA2_GPIO), dw_hdmi_imx.ko (CONFIG_DRM_IMX_HDMI)
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_E1CP \
	-d CONFIG_SMP \
	-m CONFIG_MCST_GPU_VIV -m CONFIG_DRM_VIVANTE \
	-m CONFIG_DRM_MGA2 -m CONFIG_MGA2_PWM -m CONFIG_MGA2_GPIO \
	-m CONFIG_DRM_IMX_HDMI \
	-d CONFIG_MCST_GPU_IMGTEC -d CONFIG_IMGTEC \
	-d CONFIG_MEM2ALLOC -d CONFIG_HANTRODEC -d CONFIG_BIGE \
	|| exit 1
}
conf_e3s()
{
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_ES2_DSP \
	|| exit 1;
	conf_no_builtin_gpu;
}
conf_e2s()
{
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_E2S \
	|| exit 1;
	conf_no_builtin_gpu;
}
conf_e8c()
{
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_E8C \
	|| exit 1;
	conf_no_builtin_gpu;
}
conf_e8c2()
{
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_E8C2 \
	|| exit 1;
	conf_no_builtin_gpu;
}
conf_e2c3()
{
	# e2c3 has:
	# 1) MGA2.5 (MGA2 with more controllers, overlays and 2x 2D GPU) -
	#    mga2 (CONFIG_DRM_MGA2), mga2-pwm (CONFIG_MGA2_PWM),
	#    mga2-gpio (CONFIG_MGA2_GPIO), dw_hdmi_imx (CONFIG_DRM_IMX_HDMI)
	# 2) Imagination 3D GX6650 GPU (300 GFLOPS FP32) - pvrsrvkm.ko,
	#    dolly_drv.ko (CONFIG_MCST_GPU_IMGTEC)
	# 3) Imagination D5820 (decoder) - vxd.ko, img_mem.ko (CONFIG_IMGTEC)
	# 4) Imagination E5510 (encoder) - vxekm.ko, imgvideo.ko (CONFIG_IMGTEC)
	# 5) Google VP9 memory allocator - mem2alloc.ko (CONFIG_MEM2ALLOC)
	# 6) Google VP9 decoder - hantrodec.ko (CONFIG_HANTRODEC)
	# 7) Google VP9 encoder - bige.ko (CONFIG_BIGE)
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_E2C3 \
	-d CONFIG_MCST_GPU_VIV -d CONFIG_DRM_VIVANTE \
	-m CONFIG_DRM_MGA2 -m CONFIG_MGA2_PWM -m CONFIG_MGA2_GPIO \
	-m CONFIG_DRM_IMX_HDMI \
	-m CONFIG_MCST_GPU_IMGTEC -m CONFIG_IMGTEC \
	-m CONFIG_MEM2ALLOC -m CONFIG_HANTRODEC -m CONFIG_BIGE \
	|| exit 1
}
conf_e12c()
{
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_E12C \
	|| exit 1;
	conf_no_builtin_gpu;
}
conf_e16c()
{
	$conf_script $OPTFILE \
	-e CONFIG_E2K_MACHINE -e CONFIG_E2K_E16C \
	|| exit 1;
	conf_no_builtin_gpu;
}
conf_nn()
{
	$conf_script $OPTFILE \
	-d CONFIG_NUMA -u CONFIG_NUMA_BALANCING -u CONFIG_NUMA_BALANCING_DEFAULT_ENABLED \
	|| exit 1
}
conf_prototype()
{
	# CONFIG_HZ is set to 10 temporarily (for e2c3 prototype/simulator)
	# CONFIG_IGB is builtin temporarily (e2c3 prototype uses it)
	# CONFIG_IPV6/CONFIG_BRIDGE/CONFIG_BLK_DEV_LOOP/CONFIG_TUN are builtin
	# temporarily (for virtualization on e2c3 prototype)
	# CONFIG_KERNEL_GZIP is switched to CONFIG_KERNEL_LZ4 temporarily
	# (for faster e2c3 prototype booting)
	$conf_script $OPTFILE \
	-d CONFIG_KERNEL_GZIP -e CONFIG_KERNEL_LZ4 \
	-u CONFIG_HZ_100 -e CONFIG_HZ_10 \
	-e CONFIG_IPV6 -e CONFIG_BRIDGE -e CONFIG_TUN -e CONFIG_BLK_DEV_LOOP \
	-e CONFIG_IGB \
	|| exit 1
}
conf_hardware_virt()
{
	# CONFIG_FB_VGA16, CONFIG_VGA_CONSOLE, CONFIG_FRAMEBUFFER_CONSOLE are
	# disabled temporarily - QEMU does not support them
	$conf_script $OPTFILE \
	-e CONFIG_EARLY_VIRTIO_CONSOLE \
	-e CONFIG_VSOCKETS \
	-e CONFIG_VIRTIO_VSOCKETS \
	-e CONFIG_VIRTIO_VSOCKETS_COMMON \
	-e CONFIG_VIRTIO_BLK \
	-e CONFIG_SCSI_VIRTIO \
	-e CONFIG_VIRTIO_NET \
	-e CONFIG_HVC_L \
	-e CONFIG_VIRTIO_CONSOLE \
	-d CONFIG_FB_VGA16 \
	-d CONFIG_VGA_CONSOLE \
	-e CONFIG_E1000 \
	-e CONFIG_DRM_BOCHS \
	-d CONFIG_FRAMEBUFFER_CONSOLE \
	-e CONFIG_VIRT_DRIVERS \
	-e CONFIG_VIRTIO \
	-e CONFIG_VIRTIO_PCI \
	-e CONFIG_VIRTIO_PCI_LEGACY \
	-e CONFIG_VIRTIO_BALLOON \
	-e CONFIG_VIRTIO_INPUT \
	-e CONFIG_VIRTIO_MMIO \
	-e CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES \
	-e CONFIG_VIRTUALIZATION \
	-e CONFIG_HAVE_KVM_IRQCHIP \
	-e CONFIG_HAVE_KVM_IRQFD \
	-e CONFIG_HAVE_KVM_IRQ_ROUTING \
	-e CONFIG_HAVE_KVM_EVENTFD \
	-e CONFIG_KVM_COMPAT \
	-e CONFIG_KVM \
	-e CONFIG_KVM_GUEST \
	-e CONFIG_KVM_PARAVIRTUALIZATION \
	-e CONFIG_KVM_HW_VIRTUALIZATION \
	-e CONFIG_KVM_HW_PARAVIRTUALIZATION \
	-e CONFIG_KVM_HOST_KERNEL \
	-d CONFIG_KVM_GUEST_KERNEL \
	-d CONFIG_PARAVIRT_GUEST \
	-e CONFIG_KVM_SHADOW_PT_ENABLE \
	-e CONFIG_KVM_TDP_ENABLE \
	-e CONFIG_KVM_NONPAGING_ENABLE \
	-e CONFIG_KVM_PHYS_PT_ENABLE \
	-e CONFIG_KVM_HOST_MODE \
	-e CONFIG_DIRECT_VIRQ_INJECTION \
	-e CONFIG_VIRQ_VCPU_INJECTION \
	-e CONFIG_VFIO \
	-e CONFIG_VFIO_PCI \
	|| exit 1
}
conf_host()
{
	$conf_script $OPTFILE \
	-e CONFIG_VIRTIO \
	-e CONFIG_VIRTUALIZATION \
	-e CONFIG_HAVE_KVM_IRQCHIP \
	-e CONFIG_HAVE_KVM_IRQFD \
	-e CONFIG_HAVE_KVM_IRQ_ROUTING \
	-e CONFIG_HAVE_KVM_EVENTFD \
	-e CONFIG_KVM_COMPAT \
	-e CONFIG_KVM \
	-e CONFIG_KVM_GUEST \
	-e CONFIG_KVM_PARAVIRTUALIZATION \
	-e CONFIG_KVM_HW_VIRTUALIZATION \
	-e CONFIG_KVM_HW_PARAVIRTUALIZATION \
	-e CONFIG_KVM_HOST_KERNEL \
	-d CONFIG_KVM_GUEST_KERNEL \
	-d CONFIG_PARAVIRT_GUEST \
	-e CONFIG_KVM_SHADOW_PT_ENABLE \
	-e CONFIG_KVM_NONPAGING_ENABLE \
	-e CONFIG_KVM_PHYS_PT_ENABLE \
	-e CONFIG_KVM_TDP_ENABLE \
	-e CONFIG_KVM_HOST_MODE \
	-e CONFIG_DIRECT_VIRQ_INJECTION \
	-e CONFIG_VIRQ_VCPU_INJECTION \
	-e CONFIG_STP \
	-e CONFIG_BRIDGE \
	-e CONFIG_IPV6 \
	-e CONFIG_TUN \
	-e CONFIG_BLK_DEV_LOOP \
	--set-str CONFIG_CMDLINE "root=/dev/sda1 console=ttyS0,115200 ignore_loglevel init=/root/run_spt transparent_hugepage=madvise idle=mwait usbcore.nousb" \
	|| exit 1
}
conf_guest()
{
	$conf_script $OPTFILE \
	-e CONFIG_EARLY_VIRTIO_CONSOLE \
	-e CONFIG_VSOCKETS \
	-e CONFIG_VIRTIO_BLK \
	-e CONFIG_SCSI_VIRTIO \
	-e CONFIG_VIRTIO_NET \
	-e CONFIG_VIRTIO_CONSOLE \
	-e CONFIG_VIRT_DRIVERS \
	-e CONFIG_VIRTIO \
	-e CONFIG_VIRTIO_PCI \
	-e CONFIG_VIRTIO_PCI_LEGACY \
	-e CONFIG_VIRTIO_BALLOON \
	-e CONFIG_VIRTIO_INPUT \
	-e CONFIG_VIRTIO_MMIO \
	-e CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES \
	-e CONFIG_HVC_L \
	-e CONFIG_VIRTUALIZATION \
	-e CONFIG_HAVE_KVM_IRQCHIP \
	-e CONFIG_HAVE_KVM_IRQFD \
	-e CONFIG_HAVE_KVM_IRQ_ROUTING \
	-e CONFIG_HAVE_KVM_EVENTFD \
	-e CONFIG_KVM_COMPAT \
	-e CONFIG_KVM \
	-e CONFIG_KVM_GUEST \
	-e CONFIG_KVM_PARAVIRTUALIZATION \
	-e CONFIG_KVM_HW_VIRTUALIZATION \
	-d CONFIG_KVM_HOST_KERNEL \
	-e CONFIG_KVM_GUEST_KERNEL \
	-d CONFIG_PARAVIRT_GUEST \
	-e CONFIG_KVM_GUEST_HW_PV \
	-e CONFIG_KVM_SHADOW_PT \
	-e CONFIG_KVM_GUEST_MODE \
	-e CONFIG_KVM_GUEST_SMP \
	-d CONFIG_KVM_GUEST_DEBUG \
	-e CONFIG_DIRECT_VIRQ_INJECTION \
	-e CONFIG_VIRQ_VCPU_INJECTION \
	-e CONFIG_ISO9660_FS \
	|| exit 1
}
conf_power_efficient()
{
	$conf_script $OPTFILE \
	-e CONFIG_WQ_POWER_EFFICIENT_DEFAULT \
	|| exit 1
}
e2k_nort()  { conf_localversion; }
e2k_rt()    { conf_localversion; }
e2k_nn()    { conf_localversion; conf_nn; }
e2k_nnrt()  { conf_localversion; conf_nn; }
e2k_host()  { conf_localversion; conf_host; }
e2k_guest() { conf_localversion; conf_guest; }
e1cp_nort() { conf_localversion; conf_e1cp; conf_power_efficient; }
e1cp_rt()   { conf_localversion; conf_e1cp; conf_power_efficient; }
e2s_nort()  { conf_localversion; conf_e2s; }
e2s_rt()    { conf_localversion; conf_e2s; }
e2s_nn()    { conf_localversion; conf_e2s; conf_nn; }
e2s_nnrt()  { conf_localversion; conf_e2s; conf_nn; }
e2s_host()  { conf_localversion; conf_e2s; conf_host; }
e2s_guest() { conf_localversion; conf_e2s; conf_guest; }
e3s_nort()  { conf_localversion; conf_e3s; }
e3s_rt()    { conf_localversion; conf_e3s; }
e3s_nn()    { conf_localversion; conf_e3s; conf_nn; }
e3s_nnrt()  { conf_localversion; conf_e3s; conf_nn; }
e3s_host()  { conf_localversion; conf_e3s; conf_host; }
e3s_guest() { conf_localversion; conf_e3s; conf_guest; }
e8c_nort()  { conf_localversion; conf_e8c; }
e8c_rt()    { conf_localversion; conf_e8c; }
e8c_nn()    { conf_localversion; conf_e8c; conf_nn; }
e8c_nnrt()  { conf_localversion; conf_e8c; conf_nn; }
e8c_host()  { conf_localversion; conf_e8c; conf_host; }
e8c_guest() { conf_localversion; conf_e8c; conf_guest; }
e8c2_nort() { conf_localversion; conf_e8c2; }
e8c2_rt()   { conf_localversion; conf_e8c2; }
e8c2_nn()   { conf_localversion; conf_e8c2; conf_nn; }
e8c2_nnrt() { conf_localversion; conf_e8c2; conf_nn; }
e8c2_host() { conf_localversion; conf_e8c2; conf_host; }
e8c2_guest(){ conf_localversion; conf_e8c2; conf_guest; }
e16c_nort() { conf_localversion; conf_e16c; conf_hardware_virt; }
e16c_rt()   { conf_localversion; conf_e16c; conf_hardware_virt; }
e16c_nn()   { conf_localversion; conf_e16c; conf_hardware_virt; conf_nn; }
e16c_nnrt() { conf_localversion; conf_e16c; conf_hardware_virt; conf_nn; }
e12c_proto(){ conf_localversion; conf_e12c; conf_hardware_virt; conf_prototype; }
e16c_proto(){ conf_localversion; conf_e16c; conf_hardware_virt; conf_prototype; }
e2c3_proto(){ conf_localversion; conf_e2c3; conf_hardware_virt; conf_prototype;
	      conf_power_efficient; conf_nn; }
# These are temporary and needed because distribution does not know about "_proto" kernels
e12c_nort() { e12c_proto; }
e2c3_nort() { e2c3_proto; }
###############################################################################
trap "cleanup" 1 2 3 6 15 EXIT
while [ "$1" != "" ] ; do
	opt="$1"
	shift
	case "$opt" in
	--def|-d) def_flg=0;;
	--conf|-c) [ x"$DCONF" != x ] && usage; DCONF="$1"; shift;;
	--file|-f) [ x"$DFILE" != x ] && usage; DFILE="$1"; shift;;
	--output_directory|-o) OUTPUT_DIR="$1"; shift;;
	--help|-h) Usage;;
	*) echo "incorrect param: $opt"; Usage;;
	esac
done
[ x"$DCONF" == x ] && Usage
if [[ "$CONFS" != *" $DCONF "* ]]; then
	echo "unknown <conf>: $DCONF"
	KnownConfs
	exit 1
fi
# src defconfig
SFILE=$conf_path/defconfig
if [[ "$DCONF" == *"_rt"* ]] || [[ "$DCONF" == *"_nnrt"* ]]; then
	SFILE=$conf_path/rt_defconfig
fi
# dst defconfig
if [ x"$DFILE" == x ]; then
	DFILENAME=$tmpf
	[ x$def_flg == x0 ] && DFILENAME=gen_${DCONF}_defconfig
else
	if [[ $DFILE != *"_defconfig" ]]; then
		usage "incorrect defconfig file name: $DFILE"
	fi
	DFILENAME=$DFILE
fi
DFILE=$conf_path/$DFILENAME
OPTFILE="--file $DFILE"

cd $scdir/../../.. || exit 1
#pwd
#echo "$DCONF $DFILENAME $DFILE $SFILE"
#echo "$OPTFILE"
#exit 0

# Generate defconfig
cp $SFILE $DFILE || exit 1
$DCONF
[ x$def_flg == x0 ] && exit 0

# Generate .config
make O=$OUTPUT_DIR $DFILENAME || exit 1
make O=$OUTPUT_DIR olddefconfig
exit $?
